name: paradigm

on: [push]
    
jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        graphics: [vulkan, all]
    name: windows
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: setup dependencies
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: initialize
      run: |
            python3 tools/generate_project_info.py
            cmake --preset=windows-release-${{ matrix.graphics }} -DPE_BENCHMARKS=ON
            python3 tools/patch.py ./project_files/x64/
    - name: compile
      run: cmake --build --preset=windows-release-${{ matrix.graphics }}
    - name: test
      run: |
            cd builds\x64\release\bin
            .\tests.exe --formatter compact --no-source
    - name: finalize
      uses: actions/upload-artifact@v2
      with:
        name: windows-${{ matrix.graphics }}-bin
        path: builds/x64/release/bin/benchmarks.exe
        if-no-files-found: error
        retention-days: 1
  windowsbenchmark:
    strategy:
      fail-fast: false
      matrix:
        graphics: [vulkan, all]
    name: windows-benchmark
    needs: windows
    runs-on: windows-2022
    steps:
    - name: setup
      id: download
      uses: actions/download-artifact@v2
      with:
        name: windows-${{ matrix.graphics }}-bin
    - name: benchmark
      run: .\benchmarks.exe --benchmark_out_format=json --benchmark_out=results.json
    - name: finalize
      uses: actions/upload-artifact@v2
      with:
        name: windows-${{ matrix.graphics }}
        path: results.json
        if-no-files-found: error
  ubuntu:
    container:
      image: gcc:11.2.0
    strategy:
      fail-fast: false
      matrix:
        graphics: [vulkan, all]
    name: ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: setup dependencies
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1-linux-x86_64.sh -q -O /tmp/cmake-install.sh \
        && chmod u+x /tmp/cmake-install.sh \
        && mkdir /opt/cmake \
        && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake \
        && rm /tmp/cmake-install.sh
        ln -s /opt/cmake/bin/* /usr/bin/
        apt-get update && apt-get install python3 -y
        python3 tools/generate_project_info.py
    - name: install GL libraries
      if: ${{ matrix.graphics  == 'all' ||  matrix.graphics  == 'gles' }}
      run: apt-get install libgl1-mesa-dev libegl1-mesa-dev -y
    - name: initialize
      run: cmake --preset=gnu-linux-release-${{ matrix.graphics }} -DPE_BENCHMARKS=ON
    - name: compile
      run: cmake --build --preset=gnu-linux-release-${{ matrix.graphics }}
    - name: test
      run: ./builds/default/bin/tests --formatter compact --no-source
    - name: finalize
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-${{ matrix.graphics }}-bin
        path: builds/default/bin/benchmarks
        if-no-files-found: error
        retention-days: 1
  ubuntubenchmark:
    container:
      image: gcc:11.2.0
    strategy:
      fail-fast: false
      matrix:
        graphics: [vulkan, all]
    name: ubuntu-benchmark
    needs: ubuntu
    runs-on: ubuntu-latest
    steps:
    - name: setup
      id: download
      uses: actions/download-artifact@v2
      with:
        name: ubuntu-${{ matrix.graphics }}-bin
    - name: install GL libraries
      if: ${{ matrix.graphics  == 'all' ||  matrix.graphics  == 'gles' }}
      run: apt-get update && apt-get install libgl1-mesa-dev libegl1-mesa-dev -y
    - name: prepare
      run: chmod +x benchmarks
    - name: benchmark
      run: ./benchmarks --benchmark_out_format=json --benchmark_out=results.json
    - name: finalize
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-${{ matrix.graphics }}
        path: results.json
        if-no-files-found: error
  android:
    env:
      CC: gcc
      CXX: g++
    strategy:
      fail-fast: false
      matrix:
        graphics: [vulkan]
    name: android
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: dependencies
      run: yes | $ANDROID_SDK_ROOT/tools/bin/sdkmanager --licenses
    - name: initialize
      run: cmake --preset=android-release-${{ matrix.graphics }}
    - name: compile
      run: cmake --build --preset=android-release-${{ matrix.graphics }}
    - name: verify
      run: python3 -c "import os;import sys;sys.exit(0) if os.path.exists('builds/android/main/build/outputs/bundle/release/main-release.aab') else sys.exit(1)"
